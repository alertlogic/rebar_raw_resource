%% -*- mode: erlang; erlang-indent-level: 4; indent-tabs-mode: nil -*-
%% -------------------------------------------------------------------
%%
%% Copyright (c) 2016 Basho Technologies, Inc.
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%
%% -------------------------------------------------------------------

{profiles, [
    {prod, [
        {erl_opts, [
            no_debug_info,
            no_auto_import,
            warn_export_all,
            warn_obsolete_guard,
            warnings_as_errors
        ]}
    ]},
    {develop, [
        {erl_opts, [
            debug_info,
            {d, rrr_develop},
            no_auto_import,
            warn_export_all,
            warn_obsolete_guard,
            warnings_as_errors
        ]},
        % Running dialyzer on a rebar plugin from within rebar causes all
        % sorts of suffering, so I run it externally and don't bother with
        % a configuration clause for it here at all.

        % Xref, on the other hand, is usable as long as rebar is invoked by
        % the emulator directly, which I do in development, so setting it up
        % here is still simpler than running it externally.
        {xref_checks, [
            deprecated_function_calls,
            deprecated_functions,
            locals_not_used,
            undefined_function_calls,
            undefined_functions
        ]}
    ]}
]}.

{project_plugins, [rebar3_hex]}.
